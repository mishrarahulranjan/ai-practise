plugins {
    id 'java' // Apply the Java plugin if it's a Java project
    id("io.spring.dependency-management") version "1.1.4" // Spring Dependency Management Plugin
    id 'org.springframework.boot' version '3.5.4'
}

group 'org.rr.ai'
version '1.0-SNAPSHOT'

bootJar {
    // Replace 'com.example.yourapp.YourApplication' with the actual fully qualified name of your main class
    mainClass = 'com.rr.ai.SpringAiStarter'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21) // Sets the Java version
    }
}

// Or, if you prefer to define properties explicitly:
ext {
    javaVersion = 21
    springAiVersion = '1.0.0'
}


repositories {
    mavenCentral()
    maven {
        name = "spring-milestones"
        url = uri("https://repo.spring.io/milestone")
        mavenContent {
            releasesOnly()
        }
    }
}


// Core Spring AI module (contains ChatClient, Prompt, ChatMemory, SimpleLoggerAdvisor, etc.)
dependencyManagement {
    imports{
        mavenBom 'org.springframework.ai:spring-ai-bom:1.0.0'
    }
}
dependencies {

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    annotationProcessor 'org.projectlombok:lombok'

    // Lombok for compile-time access to its annotations (like @Data, @Builder)
    // It's 'compileOnly' because Lombok itself doesn't need to be on the runtime classpath
    // after it has done its work during compilation.
    compileOnly 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-logging'

    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.ai:spring-ai-starter-mcp-client-webflux'

    implementation 'org.springframework.ai:spring-ai-vector-store'
    implementation 'org.springframework.ai:spring-ai-pgvector-store'
    implementation 'org.springframework.ai:spring-ai-advisors-vector-store'
    implementation 'org.springframework.ai:spring-ai-starter-vector-store-pgvector'
    implementation 'org.postgresql:postgresql'

    // Ollama AI profile
    if (!project.hasProperty('aiProfile') || project.property('aiProfile') == 'ollama-ai') {
        implementation 'org.springframework.ai:spring-ai-starter-model-ollama'
    }

    if (project.hasProperty('aiProfile') && project.property('aiProfile') == 'open-ai') {
        implementation 'org.springframework.ai:spring-ai-starter-model-openai'
    }

    // Mistral AI profile
    if (project.hasProperty('aiProfile') && project.property('aiProfile') == 'mistral-ai') {
        implementation 'org.springframework.ai:spring-ai-starter-model-mistral-ai'
    }
}

tasks.register('showAiProfile') {
    doLast {
        if (project.hasProperty('aiProfile')) {
            println "Active AI Profile: ${project.property('aiProfile')}"
        } else {
            println "No specific AI Profile activated. Defaulting to 'ollama-ai' (if applicable)."
        }
    }
}

test {
    useJUnitPlatform()
}